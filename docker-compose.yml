# Este documento contiene los datos para generar los contenedores necesarios
# el servicio de backend de la aplicación web Car Share
version: "3.8"
services:

  # Crea un proxy inverso
  carshare-reverseproxy:
    # Imagen base para generar el contenedor
    image: jwilder/nginx-proxy
    # Nombre asignado al contenedor
    container_name: carshare-reverseproxy
    # Puertos abiertos para acceder al contenedor
    # Asigno el 81 para que no haya conflictos con el ciente
    ports:
      - 81:80
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - carshare
    privileged: true


  # Contenedor para la persistencia de datos
  carshare-db:
    # La imagen del contenedor está preparada en dockerhub
    image: rodrigo81/carshare-db
    # Nombre asignado al contenedor
    container_name: carshare-db
    # Red para el conjunto de contenedores
    ports:
      - 3306:3306
    #La ruta del volumen debe apuntar a la carpeta que contiene los datos de la base de datos
    volumes:
      - database-carshare:/var/lib/mysql
    #Variables de entorno  para el contenedor
    env_file:
      - .env.example
    networks:
      - carshare
    depends_on:
        - carshare-reverseproxy

 # Contenedor para el servidor laravel
  carshare-servidor:
    # La imagen del contenedor se construye sobre una adecuando las necesidades
    build: .
    # Nombre asignado al contenedor
    container_name: carshare-servidor
    # Variable de entorno para el contendor
    environment:
      # Esta ruta debe estar incluida en el fichero hosts del anfitrión
      VIRTUAL_HOST: server-ruedas.com
    depends_on:
        - carshare-db
        - carshare-reverseproxy
    networks:
        - carshare
    # Se mapea la carpeta con una local
    volumes:
        - .:/var/www/html/
    # restart: always

networks:
    carshare:
        driver: bridge
volumes:
    database-carshare:
